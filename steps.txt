# testar objetos do login e register - ok


# CRUD de produtos 

 -adcionar produtos
 




 - como vai funcionar:
  as pessoas que trabalham na migrate vao postar o serviço delas como produto e vao colocar alem do preço o estoque que seria o limite de clientes que consegue administrar, quando acabar o serviço vai ficar como inidisponivel, serviços inidisponiveis sao ofuscados da tela de cliente


  - colocar um middleware de permissões de administrador em todas as rotas que precisam dessa permissão

  - criar um carrinho para o user no momento que ele criar a conta


























  generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique(map: "User_email_key")
  name     String
  role     String    @default("normal")
  password String
  products Product[]
  cart     Cart?
}

model Cart {
  id          String        @id
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @unique
  cartproduct Cartproduct[]

  @@index([userId])
}

model Cartproduct {
  id         String   @id @default(uuid())
  productId  String
  quanty     Int
  cartId     String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  cart       Cart?    @relation(fields: [cartId], references: [id], map: "CartProduct_cartId_fkey")
  product    Product  @relation(fields: [productId], references: [id], map: "CartProduct_productId_fkey")

  @@index([cartId], map: "CartProduct_cartId_fkey")
  @@index([productId], map: "CartProduct_productId_fkey")
}

model Product {
  id          String        @id @default(uuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  name        String
  stock       Int           @default(1)
  price       Int
  discount    Int           @default(0)
  category    String
  parcels     Int           @default(1)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())
  discription String
  cartproduct Cartproduct[]
}
