generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @unique @default(uuid())
  name          String
  email         String         @unique
  password      String
  role          UserRole       @default(USER)
  created_at    DateTime       @default(now())
  Carts         Cart[]
  Products      Product[]
  Orders        Order[]
  Notifications Notification[]
}

model Product {
  id            Int           @id @unique @default(autoincrement())
  name          String
  description   String
  price         Float
  stock         Int
  category      String
  discount      Int?          @default(0)
  created_at    DateTime      @default(now())
  product_owner String
  owner         User          @relation(fields: [product_owner], references: [id], onDelete: Cascade)
  ProductCart   ProductCart[]
}

model Cart {
  id         Int           @id @unique @default(autoincrement())
  user_id    String
  user       User          @relation(fields: [user_id], references: [id])
  status     CartStatus    @default(ACTIVE)
  created_at DateTime      @default(now())
  order      Order[]
  products   ProductCart[]
}

model ProductCart {
  id         Int      @id @unique @default(autoincrement())
  cart_id    Int
  product_id Int
  quanty     Int      @default(1)
  price      Float
  carrinho   Cart     @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([cart_id, product_id]) // Constraint Ãºnica composta
}

model Order {
  id         Int         @id @unique @default(autoincrement())
  user_id    String
  user       User        @relation(fields: [user_id], references: [id])
  cart_id    Int         @unique
  Cart_id    Cart        @relation(fields: [cart_id], references: [id])
  created_at DateTime    @default(now())
  total      Float
  status     OrderStatus @default(PENDING)
}

// model OrderItem {
//   id            Int     @id @unique @default(autoincrement())
//   order_id      Int
//   product_id    Int
//   quanty        Int
//   unitary_price Float
//   order         Order   @relation(fields: [order_id], references: [id])
//   product       Product @relation(fields: [product_id], references: [id])
// }

model Notification {
  id         Int      @id @unique @default(autoincrement())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  menssage   String
  created_at DateTime @default(now())
  read       Boolean  @default(false)
}

enum UserRole {
  USER
  ADMIN
}

enum CartStatus {
  ACTIVE
  CLOSED
}

enum OrderStatus {
  PENDING
  COMPLETED
}
